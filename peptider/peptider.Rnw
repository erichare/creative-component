\documentclass{article}
\usepackage{graphicx, hyperref}
\usepackage[margin=1in]{geometry}
\usepackage[backend=bibtex, natbib=true]{biblatex}
\usepackage{float}    % for fig.pos='H'
\usepackage{amsmath}
\newtheorem{rexample}{R Example}[section]
\addbibresource{references.bib}

\setlength{\parskip}{3ex}
\setlength{\parindent}{0pt}

\title{Analyzing Peptide Libraries with peptider}
\author{Eric Riemer Hare}

\begin{document}
<<concordance, echo=FALSE>>=
opts_chunk$set(concordance=TRUE)
opts_knit$set(self.contained=FALSE)
@

\maketitle
\clearpage

<<libraries, echo=FALSE, cache=FALSE, message=FALSE>>=
    library(peptider)
    library(ggplot2)
@

\section{Introduction}
Libraries of peptides, or amino acid sequences, have a number of applications in the Biological sciences, from studying protein interactions, to vaccine research. Despite their importance, little analysis has been done to assess the statistical properties of different peptide libraries.

{\it Peptider} is a newly-released R package which helps to evaluate many important statistical properties of these libraries. It supports a number of built-in library schemes, including NNN, NNB, NNK, NNS, and trimer schemes. It also allows for easy analysis of user-created custom library schemes. Peptider makes use of the R package {\it discreteRV}, which allows for manipulation and analysis of discrete random variables. By treating each amino acid in a peptide as a realization of an independent draw from the pool of all possible amino acids, probabilities for the occurrence of peptides can easily be formulated.

This paper will focus on two distinct functional areas of peptider. The first is Library Diversity, or statistical measures of the quality of the library itself. The second is Peptide Coverage, or how likely the library is to include particularly desired peptides, or peptides that are most similar to desired peptides. Before proceeding to discuss these measures, we will first discuss the built-in library schemes, and how to define custom schemes.

\subsection{Library Schemes}
Peptider has several built-in library schemes. The first is the NNN scheme, in which all four bases (Adenine, Guanine, Cytosine, and Thymine) can occur at all three positions in a particular codon, and hence there are 64 possible nucleotides. The second is the NNB scheme, where the first two positions are unrestricted, but the third position can only be three bases, yielding 48 nucleotides. Both NNK and NNS have identical statistical properties in this analysis, with the third position restricted to two bases for a total of 32 nucleotides. Finally, there are trimer-based libraries in which the codons are pre-defined. Each of these scheme definitions can be accessed with the {\it scheme} function.

<<scheme_def>>=
scheme("NNN")
@

To build a library of an appropriate scheme, the libscheme function is used. By default, peptides of length one amino acid (k = 1) will be used, but this can be specified.

<<libscheme>>=
nnk6 <- libscheme("NNK", k = 6)
@

libscheme returns a list containing two elements. The first, data, describes the probability of occurrence of each possible peptide class. The second, info, describes the number of nucleotides, the number of valid nucleotides, and the scheme definition used.

We can also create a custom library scheme by building a data frame of the same format as in Code Example 1. This code creates a custom trimer-based library with peptides of length six.

<<custom_scheme>>=
custom <- data.frame(class = c("A", "Z"), aacids = c("SLRAGPTVIDEFHKNQYMW", "*"), c = c(1, 0))
custom6 <- libscheme(custom, k = 6)
@

Having created the library of interest, we now turn our attention to assessment of these libraries.

\section{Library Diversity}
In this section, we introduce a number of properties which can be used to determine the quality of a given peptide library, and which are computable using peptider.

\subsection{Functional Diversity}
The functional diversity of a library is the overall number of different peptides in the library. Analyzing the peptide sequences directly is complex, so a useful approach is to partition the library into amino acid classes, wherein each amino acid belonging to a particular class has the same number of codon representations as all other amino acids in that class. Letting $v$ represent the number of valid amino acid classes, $k$ represent the number of amino acids in each peptide, $b_i$ represent the number of different peptides in class i, N represent the total size of the peptide library in number of peptides, and $p_i$ represent the probability of peptide class i, then the functional diversity is:

\begin{align*}
D(N, k) = \sum_{i=1}^{v^k}b_i(1 - e^{-Np_i/b_i})
\end{align*}

To compute this diversity measure in peptider, the {\it makowski} function can be used. 

<<makowski>>=
makowski(6, "NNK")
@

\subsection{Expected Coverage}
The expected coverage of the library is directly related to the diversity of the library. It is the percentage of all possible peptides that the library contains. Letting $c$ represent the number of viable amino acids in the library scheme, the expected coverage is:

\begin{align*}
C(N, k) = D(N, k)/c^k
\end{align*}

Note that the diversity of the library can range between 0 (for a library with no peptides) and $c^k$ (wherein the library includes every possible peptide). Hence, the coverage must range from 0 to 1. Peptider includes a function to compute the coverage, which again takes the peptide length and library scheme as parameters. It also accepts a parameter N representing the overall number of peptides in the library.

<<coverage>>=
coverage(6, "NNK", N = 10^8)
@

\subsection{Relative Efficiency}
In general, it is desireable to achieve a coverage as close as possible to one if we'd like the library to contain all possible peptides. One can achieve this with arbitrarily high probability by increasing the library size (N). However, doing so can drastically increase the cost of the library and may not always be possible. Ideally, the library should contain as high as possible diversity with as small as possible size. Relative Efficiency is a measure to quantify this, and is defined as:

\begin{align*}
R(N, k) = D(N, k)/N
\end{align*}

As N increases, the relative efficiency subsequently decreases. An ideal peptide library from a cost-benefit perspective would contain both a high diversity (and hence high expected coverage) and still a high relative effeciency. Efficiency can be computed with peptider in the same way as coverage.

<<efficiency>>=
efficiency(6, "NNK", N = 10^8)
@

\section{Peptide Coverage}
The measures of library diversity included in peptider introduced to this point are useful to broadly assess the library performance. However, applications of peptide libraries often require knowledge of the probability of observing particular peptides in the library[REF].

\subsection{Peptide Inclusion}
The peptide inclusion probability is the probability of obtaining at least one instance of a particular peptide in the library. If X is defined as a random variable representing the number of occurrences of this peptide, the probability is

\begin{align*}
P(X \ge 1) = 1 - P(X = 0) \approx 1 - e^{-N\sum_ip_i}
\end{align*}

$p_i$ again is the probability of peptide class i. Because of the dependence on the peptide class, this inclusion probability will vary depending on the particular peptide of interest, and the library scheme. The {\it ppeptide} function in peptider allows computation of the probability. It accepts a peptide sequence as a character vector, the library scheme, and the library size.

<<inclusion>>=
ppeptide("HENNING", "NNK", N = 10^10)
@

We may also be interested in the range of inclusion probabilities for all peptides rather than just a particular sequence. In this case, the {\it detect} function is useful. detect differs a bit syntactically as it requires the created library to be passed in as an argument. For an NNK library with peptide lengths 6 and library size $10^7$, we have:

<<detect>>=
my_lib <- libscheme("NNK", 6)

summary(detect(my_lib, 10^7))
@

<<detectplot>>=
qplot(detect(my_lib, 10^7), weight = di, geom = "histogram", data = my_lib$data) +
    xlab("Inclusion Probability") +
    ylab("Count")
@

\subsection{Neighborhoods}

\section{Speed Improvements}

\section{Conclusion}

\end{document}